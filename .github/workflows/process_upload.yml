name: Process Upload

on:
  push:
    paths:
      - 'uploads/**'

jobs:
  process:
    if: "${{ github.actor != 'github-actions[bot]' }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Find uploaded file
        run: |
          echo "Looking for uploaded file(s)"
          # get list of added files in the push
          UPLOADS=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '^uploads/' || true)
          echo "FILES=$UPLOADS" > uploads.txt
          cat uploads.txt
          # parse mapping from commit message (format: 'mapping: pipeline/mappings/xxx.yaml')
          MSG="${{ github.event.head_commit.message }}"
          echo "COMMIT_MSG=$MSG" > commit_msg.txt
          echo "$MSG"
      - name: Run pipeline for each upload
        run: |
          set -e
          UPLOADS=$(cat uploads.txt)
          MSG=$(cat commit_msg.txt)
          # extract mapping path if present in the commit message
          MAPPING=$(echo "$MSG" | sed -n 's/.*mapping: \(.*\.yaml\).*/\1/p')
          echo "Detected mapping: $MAPPING"
          for f in $UPLOADS; do
            echo "Processing $f"
            BASENAME=$(basename "$f")
            OUTDIR=standardized/${BASENAME}
            PROCESSED_MARKER="$OUTDIR/.processed"
            FAILED_MARKER="$OUTDIR/.failed"
            LOGFILE="$OUTDIR/process.log"
            if [ -f "$PROCESSED_MARKER" ]; then
              echo "Skipping $f because marker exists"
              continue
            fi
            mkdir -p "$OUTDIR"
            # run pipeline using the uploaded file as the source table; mapping optional
            if [ -n "$MAPPING" ]; then
              python -u -m pipeline.cli --mapping "$MAPPING" --work-dir "$(pwd)/$OUTDIR" > "$LOGFILE" 2>&1 || true
            else
              python -u -m pipeline.cli --mapping "" --work-dir "$(pwd)/$OUTDIR" > "$LOGFILE" 2>&1 || true
            fi
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 0 ]; then
              echo "processed at $(date -u +%Y-%m-%dT%H:%M:%SZ)" > "$PROCESSED_MARKER"
            else
              echo "failed at $(date -u +%Y-%m-%dT%H:%M:%SZ) code:$EXIT_CODE" > "$FAILED_MARKER"
            fi
          done
      - name: Upload process logs as artifact
        uses: actions/upload-artifact@v3
        with:
          name: process-logs-${{ github.run_id }}
          path: |
            standardized/**/process.log

      - name: Remove logs before committing standardized outputs
        run: |
          # remove process.log files so they are not committed to the repository
          rm -f standardized/**/process.log || true
      - name: Commit standardized outputs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add standardized || true
          # include [skip ci] so other push-triggered workflows will not run on this automated commit
          git commit -m "Add standardized outputs for uploads [skip ci]" || true
          git push || true

      - name: Comment on upload commit with results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const uploads = fs.readFileSync('uploads.txt','utf8').trim().split('\n').filter(Boolean);
            const artifactName = process.env.ARTIFACT_NAME || `process-logs-${context.runId}`;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            let body = 'Processing complete.\n\n**Files processed:**\n';
            for(const f of uploads){
              const base = f.split('/').pop();
              const out = `standardized/${base}`;
              const proc = `${out}/.processed`;
              const fail = `${out}/.failed`;
              body += `- ${f} -> ${out} `;
              try{
                const existsProc = fs.existsSync(proc);
                const existsFail = fs.existsSync(fail);
                if(existsProc) body += '(processed) ';
                if(existsFail) body += '(failed) ';
              }catch(e){}
              body += '\n';
            }
            body += `\nPer-run logs were uploaded as an Actions artifact named **${artifactName}**.\n`;
            body += `Download logs and other run artifacts from the Actions run: ${runUrl}\n`;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body,
            });
        env:
          ARTIFACT_NAME: process-logs-${{ github.run_id }}
