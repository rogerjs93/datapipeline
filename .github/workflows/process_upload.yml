name: Process Upload

on:
  push:
    paths:
      - 'uploads/**'

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Find uploaded file
        run: |
          echo "Looking for uploaded file(s)"
          # get list of added files in the push
          UPLOADS=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '^uploads/' || true)
          echo "FILES=$UPLOADS" > uploads.txt
          cat uploads.txt
          # parse mapping from commit message (format: 'mapping: pipeline/mappings/xxx.yaml')
          MSG="${{ github.event.head_commit.message }}"
          echo "COMMIT_MSG=$MSG" > commit_msg.txt
          echo "$MSG"
      - name: Run pipeline for each upload
        run: |
          set -e
          UPLOADS=$(cat uploads.txt)
          MSG=$(cat commit_msg.txt)
          # extract mapping path if present in the commit message
          MAPPING=$(echo "$MSG" | sed -n 's/.*mapping: \(.*\.yaml\).*/\1/p')
          echo "Detected mapping: $MAPPING"
          for f in $UPLOADS; do
            echo "Processing $f"
            BASENAME=$(basename "$f")
            OUTDIR=standardized/${BASENAME}
            mkdir -p "$OUTDIR"
            # run pipeline using the uploaded file as the source table; mapping optional
            if [ -n "$MAPPING" ]; then
              python -u -m pipeline.cli --mapping "$MAPPING" --work-dir "$(pwd)/$OUTDIR"
            else
              python -u -m pipeline.cli --mapping "" --work-dir "$(pwd)/$OUTDIR"
            fi
          done
      - name: Commit standardized outputs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add standardized || true
          git commit -m "Add standardized outputs for uploads" || true
          git push || true
